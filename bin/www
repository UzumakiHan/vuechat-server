#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vuechatserver:server');
var http = require('http');
const models = require('../db')
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '11112');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const SocketIO = require('socket.io')
const io = SocketIO(server, {
  transports: ['websocket']
})
var users = [];
io.on('connection', (socket) => {
  //  console.log('success')
  //发送好友申请
  socket.on('sendApplyMessage', (sendApplyInfo) => {
    // console.log(sendApplyInfo);
    models.User.updateOne({
      _id: sendApplyInfo.applyUserInfoId
    }, {
      $push: { myApplyVuechatFriendsList: sendApplyInfo.recieveUserInfoId }
    }, (err, data) => {
      if (err) throw err;
      if (data) {
        models.User.updateOne({
          _id: sendApplyInfo.recieveUserInfoId
        }, {
          $push: { applyVuechatFriendsList: sendApplyInfo.applyUserInfoId }
        }, (err1, data1) => {
          if (err1) throw err1;
          if (data1) {
            io.emit('receiveApplyMessage', {
              status: 2,
              message: '申请好友成功'
            });
            //console.log('申请中');
          } else {
            io.emit('receiveApplyMessage', {
              status: 1,
              message: '申请好友失败'
            });
            //console.log('申请失败')
          }
        })
      }
    })

  });
  //接受好友申请
  socket.on('recieveAddMessage', (recieveApplyData) => {
    //console.log(recieveApplyData)
    models.User.updateOne({
      _id: recieveApplyData.applyUserInfoId
    }, {
      $pull: { myApplyVuechatFriendsList: recieveApplyData.recieveUserInfoId },
    }, (err, data) => {
      if (err) throw err;
      if (data) {
        models.User.updateOne({
          _id: recieveApplyData.applyUserInfoId
        }, {
          $push: { friendsList: recieveApplyData.recieveUserInfoId }
        }, (err1, data1) => {
          if (err1) throw err1;
          if (data1) {
            models.User.updateOne({
              _id: recieveApplyData.recieveUserInfoId
            }, {
              $pull: { applyVuechatFriendsList: recieveApplyData.applyUserInfoId },
            }, (err2, data2) => {
              if (err2) throw err2;
              if (data2) {
                models.User.updateOne({
                  _id: recieveApplyData.recieveUserInfoId
                }, {
                  $push: { friendsList: recieveApplyData.applyUserInfoId }
                }, (err3, data3) => {
                  if (err3) throw err3;
                  if (data3) {
                    io.emit('sendMyAddMessage', {
                      status: 2,
                      message: '添加好友成功'
                    });
                  } else {
                    io.emit('sendMyAddMessage', {
                      status: 1,
                      message: '添加好友失败'
                    });
                  }
                })
              }
            })
          }
        })
      }
    })
  })


  //监听用户是否在线
  socket.on('online', (userid) => {
    let user = users.find(item => item == userid);
    if (user) {

    } else {
      //  console.log(`用户加入`);
      users.push(userid);
      socket.userid = userid;
      //广播告诉所有人加入群聊
      //io.emit('onlineBoard', users);
      //监听用户列表的变化
      // console.log(users)
      io.emit('userlist', users);


    }
  })

  // 离线私聊
  socket.on('sendOffLineChatMessage', (msg) => {
    // console.log(msg)
    let sendChatInfo = msg[0];
    let targetChatInfo = msg[1]
    models.ChatListDital.create(sendChatInfo, (err, data) => {
      if (err) throw err;
      if (data) {
        models.ChatListDital.create(targetChatInfo, (err1, data1) => {
          if (err1) throw err1;
          if (data1) {
            io.emit('receiveChatMessage', data1);
          }
        })
      }
    })

  })
  // 在线私聊
  socket.on('sendChatMessage', (msg) => {
    // console.log(msg)
    let sendChatInfo = msg[0];
    let targetChatInfo = msg[1]
    models.ChatListDital.create(sendChatInfo, (err, data) => {
      if (err) throw err;
      if (data) {
        models.ChatListDital.create(targetChatInfo, (err1, data1) => {
          if (err1) throw err1;
          if (data1) {
            io.emit('receiveChatMessage', data1);
          }
        })
      }
    })


  })
  //群聊
  socket.on('sendGrounpChatMessage', (msg) => {
    // console.log(msg);
    let chatInfo = msg;
    let chatRoomMemberId = chatInfo.chatRoomMemberId;
    let chatRoomMemberIdLength = chatRoomMemberId.length;
    let chatRoomId = chatInfo.chatRoomId
    chatRoomMemberId.forEach(chatRoomMember => {
      let sendAccountAndchatRoomId = chatRoomMember + chatRoomId;
      chatInfo['sendAccountAndchatRoomId'] = sendAccountAndchatRoomId;
      // console.log(msg)
      const saveChatGroupList = new models.chatGroupList(chatInfo);
      saveChatGroupList.save((err, data) => {
        if(err) throw err;
        chatRoomMemberIdLength--;
        if (chatRoomMemberIdLength === 0) {
          // console.log(data)
          io.emit('receiveGrounpChatMessage', data);
        }
      });
      

    });
    //  io.emit('receiveGrounpChatMessage', msg);
  })
  socket.on('disconnect', () => {

    if (socket.userid) {

      let idx = users.findIndex(item => item == socket.userid)
      users.splice(idx, 1);
      io.emit('userlist', users);
    }

  })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
